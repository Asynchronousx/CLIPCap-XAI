# File which will handle the dataset for the training and testing of the model.

# Import the necessary libraries.
import torch 
import pandas as pd
from pathlib import Path

# Class which will handle the dataset for the training and testing of the model.
# We inherit from the torch.utils.data.Dataset class to be able to use the built-in
# functions for the dataset.
class Dataset(torch.utils.data.Dataset):

    # Initialize the dataset.
    def __init__(self, data_dir):

        # Initialize the data directory.
        self.data_dir = Path(data_dir)
        
        # Initialize the mapping dataframe: this is a dataframe that contains the mapping 
        # between the image IDs and the caption IDs, previously generated by the preprocess_dataset
        # function inside the clip wrapper model.
        # Since Path overload the / operator, we can use it to concatenate the data directory.
        self.mapping_df = pd.read_csv(self.data_dir / 'caption_mapping.csv')

        # Initialize the embedding paths dictionary: this is a dictionary that contains the path to 
        # the embedding for each image ID. We build it by iterating over the mapping dataframe and 
        # creating a dictionary with the image ID as the key and the path to the embedding as the value.
        # Yay, list comprehensions!
        self.embedding_paths = {
            row['embedding_id']: self.data_dir / f"{row['embedding_id']}.pt" for _, row in self.mapping_df.iterrows()
        }
    
    # Return the length of the dataset.
    def __len__(self):
        return len(self.mapping_df)
    
    # Return the item at the given index: this is the item that will be used to train the model, 
    # and it's always the tuple of the embedding and the caption.
    def __getitem__(self, idx):

        # Get the row at the given index.
        row = self.mapping_df.iloc[idx]

        # Load the embedding.
        embedding = torch.load(self.embedding_paths[row['embedding_id']])

        # Convert the embedding to a float.
        embedding = embedding.float()
        
        # Get the caption.  
        caption = row['caption']

        # Return the embedding and the caption.
        return embedding, caption
    